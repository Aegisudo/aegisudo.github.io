[{"content":"Hysteria2 Prep The official Hysteria project provides a bash script that can automatically download the latest version of Hysteria and configure a systemd service on common Linux distributions.\n1 bash \u0026lt;(curl -fsSL https://get.hy2.sh/) For more help regarding this script, please refer to the server installation script\nConfig After running the script, the following output will appear.\n1 2 3 4 5 6 7 Congratulation! Hysteria 2 has been successfully installed on your server. What\u0026#39;s next? + Take a look at the differences between Hysteria 2 and Hysteria 1 at https://hysteria.network/docs/misc/2-vs-1/ + Check out the quick server config guide at https://hysteria.network/docs/getting-started/Server/ + Edit server config file at /etc/hysteria/config.yaml + Start your hysteria server with systemctl start hysteria-server.service + Configure hysteria start on system boot with systemctl enable hysteria-server.service\u0026lt;/code\u0026gt;\u0026lt;/pre\u0026gt;\u0026lt;p style=\u0026#34;\u0026#34;\u0026gt;The /etc/hysteria/config.yaml file is the proxy configuration file used by the Hysteria service.\u0026lt;/p\u0026gt;\u0026lt;h4 style=\u0026#34;\u0026#34; id=\u0026#34;1.2.1-acme-way\u0026#34;\u0026gt;1.2.1 Acme Way\u0026lt;/h4\u0026gt;\u0026lt;p style=\u0026#34;\u0026#34;\u0026gt;And the content of config.yaml is automatically generated as follows\u0026lt;/p\u0026gt;\u0026lt;pre\u0026gt;\u0026lt;code class=\u0026#34;language-yaml\u0026#34;\u0026gt;# listen: :443 If Not on 443 Port, use Config is as Following\n1 2 3 4 5 6 7 8 9 10 11 12 13 listen: :port dedicated tls: cert: /etc/hysteria/server.crt key: /etc/hysteria/server.key auth: type: password password: YeAXxKNma68ohtPesHmnJH0B masquerade: type: proxy proxy: url: https://bing.com/ rewriteHost: true Or, Hysteria2 on 443 Port needs acme applied cert\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 listen: :443 acme: domains: - your.domain.net email: your@email.com auth: type: password password: YeAXxKNma68ohtPesHmnJH0B masquerade: type: proxy proxy: url: https://bing.com/ rewriteHost: true And do not forget to generate cert using the script below.\n1 openssl req -x509 -nodes -newkey ec:\u0026lt;(openssl ecparam -name prime256v1) -keyout /etc/hysteria/server.key -out /etc/hysteria/server.crt -subj \u0026#34;/CN=bing.com\u0026#34; -days 36500 \u0026amp;\u0026amp; sudo chown hysteria /etc/hysteria/server.key \u0026amp;\u0026amp; sudo chown hysteria /etc/hysteria/server.crt Skip-cert-verify1\nHere I highly recommend that if you use Self-signed Cert Way then you should add the field of pinSHA256 to skip-cert-verify in the client config.yaml. To get the pinSHA256 of the cert, the command following could be adopted.\n1 openssl x509 -noout -fingerprint -sha256 -in /etc/hysteria/server.crt Run Server Start your hysteria server and Configure hysteria start on system boot\n1 2 systemctl start hysteria-server.service systemctl enable hysteria-server.service Run Client Using the config.yaml\n1 2 3 4 5 6 7 8 9 name: \u0026#34;name\u0026#34;, type: hysteria2, server: ip addr, port: dedicated port, up: \u0026#34;600 Mbps\u0026#34;, down: \u0026#34;1000 Mbps\u0026#34;, password: YeAXxKNma68ohtPesHmnJH0B, skip-cert-verify: true, pingSHA256: the pingSHA256 generated Xray Any G-UI panel is feasible, however here I prefer to manully configure Xray.\nInstall Install via Script And the official of X-ray provides install script, which will save lot of time.\n1 bash -c \u0026#34;$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)\u0026#34; @ install Then output\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 warning: The following are the actual parameters for the xray service startup. warning: Please make sure the configuration file path is correctly set. /etc/systemd/system/xray.service [Unit] Description=Xray Service Documentation=https://github.com/xtls After=network.target nss-lookup.target [Service] User=nobody CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE NoNewPrivileges=true ExecStart=/usr/local/bin/xray run -config /usr/local/etc/xray/config.json Restart=on-failure RestartPreventExitStatus=23 LimitNPROC=10000 LimitNOFILE=1000000 [Install] WantedBy=multi-user.target /etc/systemd/system/xray.service.d/10-donot_touch_single_conf.conf In case you have a good reason to do so, duplicate this file in the same directory and make your customizes there. Or all changes you made will be lost! # Refer: https://www.freedesktop.org/software/systemd/man/systemd.unit.html [Service] ExecStart= ExecStart=/usr/local/bin/xray run -config /usr/local/etc/xray/config.json Install Manually Discarded Configure The config file is /usr/local/etc/xray/config.json, you can select the example from Xray-examples. Here I use VLESS-TCP-XTLS-Vision-REALITY.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;debug\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;port\u0026#34;: 443, \u0026#34;protocol\u0026#34;: \u0026#34;vless\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;clients\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026#34;, // run `xray uuid` to generate \u0026#34;flow\u0026#34;: \u0026#34;xtls-rprx-vision\u0026#34; } ], \u0026#34;decryption\u0026#34;: \u0026#34;none\u0026#34; }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;reality\u0026#34;, \u0026#34;realitySettings\u0026#34;: { \u0026#34;dest\u0026#34;: \u0026#34;\u0026#34;, // A website that support TLS1.3 and h2. You can also use `1.1.1.1:443` as dest \u0026#34;serverNames\u0026#34;: [ \u0026#34;\u0026#34; // A server name in the cert of dest site. If you use `1.1.1.1:443` as dest, then you can leave `serverNames` empty, it is a possible ways to bypass Iran\u0026#39;s internet speed restrictions. ], \u0026#34;privateKey\u0026#34;: \u0026#34;\u0026#34;, // run `xray x25519` to generate. Public and private keys need to be corresponding. \u0026#34;shortIds\u0026#34;: [// Required, list of shortIds available to clients, can be used to distinguish different clients \u0026#34;\u0026#34;, // If this item exists, client shortId can be empty \u0026#34;0123456789abcdef\u0026#34; // 0 to f, length is a multiple of 2, maximum length is 16 ] } }, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;destOverride\u0026#34;: [ \u0026#34;http\u0026#34;, \u0026#34;tls\u0026#34;, \u0026#34;quic\u0026#34; ], \u0026#34;routeOnly\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;freedom\u0026#34;, \u0026#34;tag\u0026#34;: \u0026#34;direct\u0026#34; } ] } The optimal dest and serverNames could be determined via RealiTLScanner. If golang already installed on your server, compiling RealiTLScanner is recommended.\n1 2 git clone https://github.com/XTLS/RealiTLScanner.git go build Otherwise it\u0026rsquo;s quite easy to using via compiled binary.\n1 2 3 4 wget https://github.com/XTLS/RealiTLScanner/releases/download/v0.2.1/RealiTLScanner-linux-64 mv RealiTLScanner-linux-64 rlscn chmod +x rlscn ./rlscn -addr yourip DO NOT TRY any Site that Use Cloudflare CDN as dest and serverNames!\nUnless you do not care about the network traffic and the reachability from China of your IP!\nRun Server After script in 2.1.1, the xray.service is actually running. Once the config has been edited, you should:\n1 2 systemctl restart xray.service systemctl status xray.service Run Client Using the config.yaml for Clash Meta Core\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 - name: \u0026#34;Dir-\u0026gt;NL|Liteserver Reality\u0026#34; type: vless server: ip addr port: port dedicated uuid: generated via \u0026#39;xray uuid\u0026#39; network: tcp tls: true udp: true flow: xtls-rprx-vision servername: serverName # REALITY servername reality-opts: public-key: pair to the privateKey generated by command \u0026#39;xray x25519\u0026#39; short-id: idGen # optional client-fingerprint: chrome # cannot be empty Or, config.json for Xray Core\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 { \u0026#34;log\u0026#34;: { \u0026#34;loglevel\u0026#34;: \u0026#34;debug\u0026#34; }, \u0026#34;inbounds\u0026#34;: [ { \u0026#34;listen\u0026#34;: \u0026#34;127.0.0.1\u0026#34;, \u0026#34;port\u0026#34;: 10808, \u0026#34;protocol\u0026#34;: \u0026#34;socks\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;udp\u0026#34;: true }, \u0026#34;sniffing\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;destOverride\u0026#34;: [ \u0026#34;http\u0026#34;, \u0026#34;tls\u0026#34;, \u0026#34;quic\u0026#34; ], \u0026#34;routeOnly\u0026#34;: true } } ], \u0026#34;outbounds\u0026#34;: [ { \u0026#34;protocol\u0026#34;: \u0026#34;vless\u0026#34;, \u0026#34;settings\u0026#34;: { \u0026#34;vnext\u0026#34;: [ { \u0026#34;address\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;port\u0026#34;: 443, \u0026#34;users\u0026#34;: [ { \u0026#34;id\u0026#34;: \u0026#34;\u0026#34;, // Needs to match server side \u0026#34;encryption\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;flow\u0026#34;: \u0026#34;xtls-rprx-vision\u0026#34; } ] } ] }, \u0026#34;streamSettings\u0026#34;: { \u0026#34;network\u0026#34;: \u0026#34;tcp\u0026#34;, \u0026#34;security\u0026#34;: \u0026#34;reality\u0026#34;, \u0026#34;realitySettings\u0026#34;: { \u0026#34;fingerprint\u0026#34;: \u0026#34;chrome\u0026#34;, \u0026#34;serverName\u0026#34;: \u0026#34;\u0026#34;, // A website that support TLS1.3 and h2. If your dest is `1.1.1.1:443`, then leave it empty \u0026#34;publicKey\u0026#34;: \u0026#34;\u0026#34;, // run `xray x25519` to generate. Public and private keys need to be corresponding. \u0026#34;spiderX\u0026#34;: \u0026#34;\u0026#34;, // If your dest is `1.1.1.1:443`, then you can fill it with `/dns-query/` or just leave it empty \u0026#34;shortId\u0026#34;: \u0026#34;\u0026#34; // Required } }, \u0026#34;tag\u0026#34;: \u0026#34;proxy\u0026#34; } ] } The above quote is excerpted from Hysteria2\u0026rsquo;s Suggestion\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2024-04-01T00:00:00Z","image":"https://blog.0bit.ch/archives/regular-proxy-installation/proxy_hu433301895180059534.jpg","permalink":"https://blog.0bit.ch/archives/regular-proxy-installation/","title":"Regular Proxy Installation"},{"content":"For Reality, VM/Less and NaiveProxy(under construction) and you can replace whatever wrapped by \u0026lt;\u0026gt; to fit your sets\nPreparation Basic Prep The following things should be performed before you embark on each project\n1 2 3 4 5 apt update \u0026amp;\u0026amp; apt upgrade -y \u0026amp;\u0026amp; apt dist-upgrade -y \u0026amp;\u0026amp; apt full-upgrade -y \u0026amp;\u0026amp; apt autoremove -y reboot apt update -y \u0026amp;\u0026amp; apt install -y curl \u0026amp;\u0026amp; apt install -y vim \u0026amp;\u0026amp; apt install -y net-tools \u0026amp;\u0026amp; apt install -y socat \u0026amp;\u0026amp; apt install -y wget \u0026amp;\u0026amp; apt install -y git \u0026amp;\u0026amp; apt install sudo -y Docker and Docker Compose You could install docker as follows if you are running on a x86_64 Linux, or visit Docker Compose Document\n1 2 3 4 5 6 7 8 9 wget -qO- get.docker.com | bash docker -v systemctl enable docker DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker} mkdir -p $DOCKER_CONFIG/cli-plugins curl -SL https://github.com/docker/compose/releases/download/\u0026lt;v2.23.3\u0026gt;/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose # replace the \u0026lt;Version\u0026gt; based on your appetite. Operation Docker Network Create a shared network named nginx, where the gateway is 192.168.18.1\n1 docker network create --subnet 192.168.18.0/24 --gateway 192.168.18.1 nginx DNS record and IP assignment Add domain name record on CloudFlare(or other DNS services) and assign docker intranet IP as follows\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;ui\u0026gt;.\u0026lt;yourdomain.TLD\u0026gt; # For your x-ui panel and CDN-Wrapped available \u0026lt;na\u0026gt;.\u0026lt;yourdomain.TLD\u0026gt; # For NaiveProxy and CDN-Wrapped unavailable 192.168.18.2 # nginx 192.168.18.3 # acme and it won\u0026#39;t be necessary if apply Wildcard Certification upon DNS challenge. 192.168.18.4 # xui 192.168.18.5 # naive Acme.sh Certification 1 2 3 4 5 6 docker run --rm -itd \\ -v /home/cert:/acme.sh \\ --net=nginx --ip 192.168.18.3 \\ -e \u0026#34;CF_Token=yourCloudFlareToken\u0026#34; \\ --name=acme.sh \\ neilpang/acme.sh daemon I highly recommend apply Wildcard Certification\n1 docker exec -i acme.sh acme.sh --server letsencrypt --issue --dns dns_cf -d \u0026lt;yourdomain.TLD\u0026gt; -d *.\u0026lt;yourdomain.TLD\u0026gt; But you can also apply Cert through Standalone\n1 docker exec acme.sh --issue -d ui.\u0026lt;yourdomain.TLD\u0026gt; --server letsencrypt --standalone #standalone Install Nginx Create a temporary Nginx container for copying nginx\u0026rsquo;s default master configuration file to the host machine\n1 docker run --rm -v /home/nginx:/mnt nginx cp /etc/nginx/nginx.conf /mnt/ Create a Nginx Container and you also could use docker-compose.yml by setting variables accordingly.\n1 2 3 4 5 6 7 8 docker run -d \\ --name nginx --network=nginx --ip 192.168.18.2 \\ -p 80:80 \\ -p 443:443 \\ -v /home/nginx/conf.d:/etc/nginx/conf.d \\ -v /home/nginx/html:/usr/share/nginx/html \\ -v /home/cert:/home/cert \\ -v /home/nginx/nginx.conf:/etc/nginx/nginx.conf nginx According to this mount command for deploying nginx, the path /usr/share/nginx/html/ in the container actually corresponds to the /home/nginx/html/ path of the host, which usually holds the root folder of the website. Create a folder in the /home/nginx/html/ directory of the host, and name it after your domain name, in this case: ui.\u0026lt;yourdomain.TLD\u0026gt;\nCreate a file in the /home/nginx/conf.d/ directory ending with .conf, in this case named: ui.\u0026lt;yourdomain.TLD\u0026gt;.conf; open this file and edit the contents to:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 server { listen 80; listen 8443 ssl http2; server_name ui.\u0026lt;yourdomain.TLD\u0026gt;; index index.php index.html index.htm default.php default.htm default.html; root /usr/share/nginx/html/ui.\u0026lt;yourdomain.TLD\u0026gt;; ssl_certificate /home/cert/\u0026lt;yourdomain.TLD\u0026gt;_ecc/fullchain.cer; ssl_certificate_key /home/cert/\u0026lt;yourdomain.TLD\u0026gt;_ecc/\u0026lt;yourdomain.TLD\u0026gt;.key; ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3; ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; add_header Strict-Transport-Security \u0026#34;max-age=31536000\u0026#34;; location ~ ^/(\\.user.ini|\\.htaccess|\\.git|\\.env|\\.svn|\\.project|LICENSE|README.md){ return 404; } location ~* \\.log$ { deny all; } location ~ ^/\\.well-known { proxy_pass http://acme.sh:80; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } if ( $uri ~ \u0026#34;^/\\.well-known/.*\\.(php|jsp|py|js|css|lua|ts|go|zip|tar\\.gz|rar|7z|sql|bak)$\u0026#34; ) { return 403; } location /VMLessPath { proxy_redirect off; proxy_pass http://192.168.18.4:\u0026lt;VM/Less port\u0026gt;; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \u0026#34;upgrade\u0026#34;; proxy_set_header Host $http_host; proxy_read_timeout 300s; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } location /YourPanelPath { proxy_pass http://192.168.18.4:2053; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } access_log /usr/share/nginx/html/ui.\u0026lt;yourdomain.TLD\u0026gt;/panel.log; error_log /usr/share/nginx/html/ui.\u0026lt;yourdomain.TLD\u0026gt;/panel.error.log; } Modify the main configuration file of nginx (/home/nginx/nginx.conf), find the stream module, and add the following configuration to it\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 user nginx; worker_processes auto; error_log /var/log/nginx/error.log notice; pid /var/run/nginx.pid; events { worker_connections 1024; } stream { map $ssl_preread_server_name $sni_name { \u0026lt;SNI service name\u0026gt; reality; sing.\u0026lt;yourdomain.TLD\u0026gt; naive; default site; } upstream reality { server 192.168.18.4:\u0026lt;your reality port\u0026gt;; } upstream naive { server 192.168.18.5:443; } upstream site { server 127.0.0.1:8443; } server { listen 443 reuseport; proxy_pass $sni_name; ssl_preread on; } } http { include /etc/nginx/mime.types; default_type application/octet-stream; log_format main \u0026#39;$remote_addr - $remote_user [$time_local] \u0026#34;$request\u0026#34; \u0026#39; \u0026#39;$status $body_bytes_sent \u0026#34;$http_referer\u0026#34; \u0026#39; \u0026#39;\u0026#34;$http_user_agent\u0026#34; \u0026#34;$http_x_forwarded_for\u0026#34;\u0026#39;; access_log /var/log/nginx/access.log main; sendfile on; #tcp_nopush on; keepalive_timeout 65; #gzip on; include /etc/nginx/conf.d/*.conf; } Install Panel 1 2 3 4 5 6 7 8 9 10 11 git clone https://github.com/MHSanaei/3x-ui.git cd 3x-ui docker run -itd \\ -e XRAY_VMESS_AEAD_FORCED=false \\ -v $PWD/db/:/etc/x-ui/ \\ --network=nginx \\ --ip 192.168.18.4 \\ --restart=unless-stopped \\ --name 3x-ui \\ ghcr.io/mhsanaei/3x-ui:latest Default name and pwd is \u0026ldquo;admin\u0026rdquo; and \u0026ldquo;admin\u0026rdquo;, do change them after login and set your panel path matched to the part of .conf\nDeploy Your Reality and VM/Less(CDN) for Reality: Reality SNI and port must match to SNI and port in (/home/nginx/nginx.conf). for VM/Less: /VMLessPath and port must match to SNI and port in (/home/nginx/html/ui.\u0026lt;yourdomain.TLD\u0026gt;.conf).\nThen, enjoy your surfing.\n","date":"2023-12-25T00:00:00Z","image":"https://blog.0bit.ch/archives/proxy-upon-multiplexing-port-443/Nginx_Docker_hu1784371241376500891.png","permalink":"https://blog.0bit.ch/archives/proxy-upon-multiplexing-port-443/","title":"Proxy upon Multiplexing Port 443"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://blog.0bit.ch/archives/markdown-syntax-guide/Syntax_hu13115405939672902881.png","permalink":"https://blog.0bit.ch/archives/markdown-syntax-guide/","title":"Markdown Syntax Guide"}]